<?php

use dflydev\markdown\MarkdownParser;
use \Suin\RSSWriter\Feed;
use \Suin\RSSWriter\Channel;
use \Suin\RSSWriter\Item;

/* General Blog Functions */

$rootpath = '/Users/yuzhou/Sites/simpleblogversion2';

function get_post_names_withargv($pattern) {
    static $_cache = array();

    if (empty($_cache)) {
        $_cache = array_reverse(glob($pattern));
    }
    return $_cache;
}

function get_post_names() {

    static $_cache = array();

    if (empty($_cache)) {

        // Get the names of all the
        // posts (newest first):

        $_cache = array_reverse(glob('posts/*.md'));
    }

    return $_cache;
}

function get_posts($page = 1, $perpage = 0) {

    if ($perpage == 0) {
        $perpage = config('posts.perpage');
    }

    $posts = get_post_names_withargv($GLOBALS['rootpath'] . 'posts/*.md');

    // Extract a specific page with results
    $posts = array_slice($posts, ($page - 1) * $perpage, $perpage);

    $tmp = array();

    // Create a new instance of the markdown parser
    $md = new MarkdownParser();

    foreach ($posts as $k => $v) {

        $post = new stdClass;

        // Extract the date
        $arr = explode('_', $v);
        $post->date = strtotime(str_replace($GLOBALS['rootpath'] . 'posts/', '', $arr[0]));

        // The post URL
        $post->url = site_url() . date('Y/m', $post->date) . '/' . str_replace('.md', '', $arr[1]);

        // Get the contents and convert it to HTML
        $content = $md->transformMarkdown(file_get_contents($v));

        // Extract the title and body
        $arr = explode('</h1>', $content);
        $post->title = str_replace('<h1>', '', $arr[0]);
        $post->body = $arr[1];

        $tmp[] = $post;
    }

    return $tmp;
}

//Find post file by year, month and name
//Return post file's actually content instead of the html-formatted
function find_post_for_edit($year, $month, $name) {


    $posts = get_post_names_withargv($GLOBALS['rootpath'] . 'posts/*.md');
    foreach ($posts as $k => $v) {
        if (strpos($v, "$year-$month") !== false && strpos($v, $name . '.md') !== false) {
            $post = new stdClass;

            //Extract the date
            $arr = explode('_', $v);
            $post->date = strtotime(str_replace($GLOBALS['rootpath'] . 'posts/', '', $arr[0]));

            // The post URL
            $post->url = site_url() . date('Y/m', $post->date) . '/' . str_replace('.md', '', $arr[1]);

            //Get the contents without coverting it to HTML
            $content = file_get_contents($v);

            //Extract the title and body
            $arr = explode(PHP_EOL, $content);
            $post->title = str_replace("# ", "", $arr[0]);
            $tmp = str_replace($arr[0], '', $content);
            $tmp = trim($tmp, PHP_EOL);
            $tmp = rtrim($tmp, PHP_EOL);
            $post->body = $tmp;
            $post->path = $v;

            return $post;
        }
    }
    return false;
}

// Find post file's path by year, month and name
function find_post_path($year, $month, $name, $title=null) {

    if($title != null) {
        //strip all non-alphanumeric characters from title
        $name = preg_replace("/[^A-Za-z0-9\s]/", "", $title);
        //whitespaces truncate
        $name = preg_replace("/\s\s+/", " ", $name);
        $name = str_replace(" ", "-", $name);
    }

    foreach (get_post_names_withargv($GLOBALS['rootpath'] . 'posts/*.md') as $index => $v) {
        if (strpos($v, "$year-$month") !== false && strpos($v, $name . '.md') !== false) {
            return $v;
        }
    }

    return false;
}

// Find post by year, month and name
function find_post($year, $month, $name, $title = null) {

    if ($title != null) {
        //strip all non-alphanumeric characters from title
        $name = preg_replace("/[^A-Za-z0-9\s]/", "", $title);
        //whitespaces truncate
        $name = preg_replace("/\s\s+/", " ", $name);
        $name = trim($name, " ");
        $name = rtrim($name, " ");

        $name = str_replace(" ", "-", $name);
    }

    foreach (get_post_names_withargv($GLOBALS['rootpath'] . 'posts/*.md') as $index => $v) {
        if (strpos($v, "$year-$month") !== false && strpos($v, $name . '.md') !== false) {

            // Use the get_posts method to return
            // a properly parsed object

            $arr = get_posts($index + 1, 1);
            return $arr[0];
        }
    }

    return false;
}

//Add post
function add_post($title, $body) {
    //post created in /posts folder
    $content = '# ' . $title . PHP_EOL . $body;
    $today = date('Y-m-d');

    //strip all non-alphanumeric characters from title
    $name = preg_replace("/[^A-Za-z0-9\s]/", "", $title);
    //whitespaces truncate
    $name = preg_replace("/\s\s+/", " ", $name);
    $name = trim($name, " ");
    $name = rtrim($name, " ");

    $name = str_replace(" ", "-", $name);

    $path = '../posts/' . $today . '_' . $name . '.md';
    if (file_exists($path)) {
        return false;
    }
    return file_put_contents($path, $content);
}

//Edit post and file will be changed if title is changed.
function edit_post($path, $title, $body, $date) {

    if (file_exists($path)) {
        $content = '# ' . $title . PHP_EOL . $body;

        //strip all non-alphanumeric characters from title
        $name = preg_replace("/[^A-Za-z0-9\s]/", "", $title);
        //whitespaces truncate
        $name = preg_replace("/\s\s+/", " ", $name);
        $name = trim($name, " ");
        $name = rtrim($name, " ");

        $name = str_replace(" ", "-", $name);

        //construct new file path
        $date_string = date("Y-m-d", $date);
        $new_path = $GLOBALS['rootpath'] . "/posts/" . $date_string . "_" . $name . ".md";
        if (unlink($path)) {
            return file_put_contents($new_path, $content);
        }
    }
    return false;
}

//Delete post
function delete_post($path) {
    if (file_exists($path)) {
        return unlink($path);
    }
    return false;
}

// Helper function to determine whether
// to show the pagination buttons
function has_pagination($page = 1) {
    $total = count(get_post_names_withargv($GLOBALS['rootpath'] . '/posts/*.md'));

    return array(
        'prev' => $page > 1,
        'next' => $total > $page * config('posts.perpage')
    );
}

// The not found error
function not_found() {
    error(404, render('404', null, false));
}

// Turn an array of posts into an RSS feed
function generate_rss($posts) {

    $feed = new Feed();
    $channel = new Channel();

    $channel
            ->title(config('blog.title'))
            ->description(config('blog.description'))
            ->url(site_url())
            ->appendTo($feed);

    foreach ($posts as $p) {

        $item = new Item();
        $item
                ->title($p->title)
                ->description($p->body)
                ->url($p->url)
                ->appendTo($channel);
    }

    echo $feed;
}

// Turn an array of posts into a JSON
function generate_json($posts) {
    return json_encode($posts);
}
